{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { ceilNumber } from '../../plain/number/index.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('ceil', {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return ceilNumber(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.ceil(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    },\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.ceil(n);\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, this, true);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => this(i, n), true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});","map":{"version":3,"names":["Decimal","factory","deepMap","nearlyEqual","bigNearlyEqual","ceilNumber","createAlgorithm11","createAlgorithm14","name","dependencies","createCeil","_ref","typed","config","round","matrix","equalScalar","algorithm11","algorithm14","number","x","epsilon","numberNumber","n","exponent","concat","split","result","Math","ceil","Number","Complex","ComplexNumber","BigNumber","BigNumberBigNumber","toDecimalPlaces","toNumber","ROUND_CEIL","Fraction","FractionNumber","ArrayMatrix","ArrayMatrixNumber","i","SparseMatrixNumberBigNumber","y","DenseMatrixNumberBigNumber","numberComplexBigNumberArray","valueOf"],"sources":["C:/Users/lauta/node_modules/mathjs/lib/esm/function/arithmetic/ceil.js"],"sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { ceilNumber } from '../../plain/number/index.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar'];\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('ceil', {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return ceilNumber(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.ceil(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    },\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.ceil(n);\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, this, true);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(x, n) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => this(i, n), true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}