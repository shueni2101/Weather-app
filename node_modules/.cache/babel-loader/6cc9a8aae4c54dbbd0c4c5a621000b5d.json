{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lauta\\\\Desktop\\\\clima\\\\my-wheater\\\\src\\\\componentes\\\\DateXCountry\\\\DateCountry.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DateCountry = _ref => {\n  _s();\n\n  let {\n    city\n  } = _ref;\n  const [citys, setCitys] = useState(\"\");\n  const [dates, setDates] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n\n  const handlerEvent = async e => {\n    e.preventDefault();\n    const apiDays = `https://api.openweathermap.org/data/2.5/forecast?q=${find}&appid=fa3dd4e1d5753bebb65b815b24918780&units=metric`;\n    const wheatherDays = await fetch(apiDays);\n    const daysJson = await wheatherDays.json();\n    setForecast(daysJson);\n    setCity(wheatherJson);\n    setTemp(weatherFinal.main);\n    setWinds(weatherFinal.wind);\n    setCloud(weatherFinal.clouds);\n    setClima(weatherFinal.weather);\n  };\n\n  useEffect(() => {\n    setInterval(() => {\n      let showdate = new Date();\n      var localTime = showdate.getTime();\n      var offset = showdate.getTimezoneOffset() * 60000;\n      var utc = localTime + offset;\n      showdate = new Date(utc + 1000 * city.timezone);\n      setHours(showdate.toTimeString());\n      setDates(showdate.toDateString());\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [hours, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 14\n    }, this), dates]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DateCountry, \"XRI4Dcp6LhLIW3ABAfnUgfYPWuk=\");\n\n_c = DateCountry;\nexport default DateCountry;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateCountry\");","map":{"version":3,"names":["React","useState","useEffect","DateCountry","city","citys","setCitys","dates","setDates","hours","setHours","handlerEvent","e","preventDefault","apiDays","find","wheatherDays","fetch","daysJson","json","setForecast","setCity","wheatherJson","setTemp","weatherFinal","main","setWinds","wind","setCloud","clouds","setClima","weather","setInterval","showdate","Date","localTime","getTime","offset","getTimezoneOffset","utc","timezone","toTimeString","toDateString"],"sources":["C:/Users/lauta/Desktop/clima/my-wheater/src/componentes/DateXCountry/DateCountry.jsx"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nconst DateCountry= ({city})=> {\r\nconst [citys,setCitys]=useState(\"\");\r\nconst[dates,setDates]=useState(\"\");\r\nconst[hours,setHours]=useState(\"\");\r\nconst handlerEvent= async (e)=>{    \r\n    e.preventDefault();\r\n       \r\n       \r\n        const apiDays=`https://api.openweathermap.org/data/2.5/forecast?q=${find}&appid=fa3dd4e1d5753bebb65b815b24918780&units=metric`;\r\n        const wheatherDays= await fetch (apiDays);\r\n        const daysJson= await wheatherDays.json();\r\n        setForecast(daysJson)\r\n        setCity(wheatherJson);\r\n       setTemp(weatherFinal.main);\r\n       setWinds(weatherFinal.wind);\r\n       setCloud(weatherFinal.clouds);\r\n        setClima(weatherFinal.weather)\r\n}\r\nuseEffect(()=>{\r\nsetInterval(() =>{\r\n  \r\n    let showdate= new Date();\r\n    var localTime= showdate.getTime();\r\n    var offset= showdate.getTimezoneOffset() * 60000;\r\n    var utc= localTime + offset;\r\n    showdate= new Date(utc + 1000 * city.timezone)\r\n    setHours(showdate.toTimeString())\r\n    setDates(showdate.toDateString())\r\n},1000)\r\n\r\n},[])\r\nreturn (\r\n    <div>\r\n      {hours}<br/>\r\n      {dates}\r\n    </div>\r\n    );\r\n}\r\n  export default DateCountry;\r\n  "],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;;;AACA,MAAMC,WAAW,GAAE,QAAW;EAAA;;EAAA,IAAV;IAACC;EAAD,CAAU;EAC9B,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBL,QAAQ,CAAC,EAAD,CAA/B;EACA,MAAK,CAACM,KAAD,EAAOC,QAAP,IAAiBP,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAK,CAACQ,KAAD,EAAOC,QAAP,IAAiBT,QAAQ,CAAC,EAAD,CAA9B;;EACA,MAAMU,YAAY,GAAE,MAAOC,CAAP,IAAW;IAC3BA,CAAC,CAACC,cAAF;IAGI,MAAMC,OAAO,GAAE,sDAAqDC,IAAK,sDAAzE;IACA,MAAMC,YAAY,GAAE,MAAMC,KAAK,CAAEH,OAAF,CAA/B;IACA,MAAMI,QAAQ,GAAE,MAAMF,YAAY,CAACG,IAAb,EAAtB;IACAC,WAAW,CAACF,QAAD,CAAX;IACAG,OAAO,CAACC,YAAD,CAAP;IACDC,OAAO,CAACC,YAAY,CAACC,IAAd,CAAP;IACAC,QAAQ,CAACF,YAAY,CAACG,IAAd,CAAR;IACAC,QAAQ,CAACJ,YAAY,CAACK,MAAd,CAAR;IACCC,QAAQ,CAACN,YAAY,CAACO,OAAd,CAAR;EACP,CAbD;;EAcA7B,SAAS,CAAC,MAAI;IACd8B,WAAW,CAAC,MAAK;MAEb,IAAIC,QAAQ,GAAE,IAAIC,IAAJ,EAAd;MACA,IAAIC,SAAS,GAAEF,QAAQ,CAACG,OAAT,EAAf;MACA,IAAIC,MAAM,GAAEJ,QAAQ,CAACK,iBAAT,KAA+B,KAA3C;MACA,IAAIC,GAAG,GAAEJ,SAAS,GAAGE,MAArB;MACAJ,QAAQ,GAAE,IAAIC,IAAJ,CAASK,GAAG,GAAG,OAAOnC,IAAI,CAACoC,QAA3B,CAAV;MACA9B,QAAQ,CAACuB,QAAQ,CAACQ,YAAT,EAAD,CAAR;MACAjC,QAAQ,CAACyB,QAAQ,CAACS,YAAT,EAAD,CAAR;IACH,CATU,EAST,IATS,CAAX;EAWC,CAZQ,EAYP,EAZO,CAAT;EAaA,oBACI;IAAA,WACGjC,KADH,eACS;MAAA;MAAA;MAAA;IAAA,QADT,EAEGF,KAFH;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMC,CArCD;;GAAMJ,W;;KAAAA,W;AAsCJ,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}