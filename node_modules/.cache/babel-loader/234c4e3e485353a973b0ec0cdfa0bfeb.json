{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { isInteger } from '../../utils/number.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed(name, _objectSpread(_objectSpread({}, roundNumberSignatures), {}, {\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, this, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, this, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  }));\n});\nvar roundNumberSignatures = {\n  number: roundNumber,\n  'number, number': function numberNumber(x, n) {\n    if (!isInteger(n)) {\n      throw new TypeError(NO_INT);\n    }\n\n    if (n < 0 || n > 15) {\n      throw new Error('Number of decimals in function round must be in the range of 0-15');\n    }\n\n    return roundNumber(x, n);\n  }\n};\nexport var createRoundNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, roundNumberSignatures);\n});","map":{"version":3,"names":["_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","factory","deepMap","isInteger","createAlgorithm11","createAlgorithm12","createAlgorithm14","roundNumber","NO_INT","name","dependencies","createRound","_ref","typed","matrix","equalScalar","zeros","BigNumber","DenseMatrix","algorithm11","algorithm12","algorithm14","roundNumberSignatures","Complex","x","round","ComplexNumber","n","TypeError","ComplexBigNumber","_n","toNumber","numberBigNumber","toDecimalPlaces","BigNumberBigNumber","Fraction","FractionNumber","ArrayMatrix","SparseMatrixNumberBigNumber","y","DenseMatrixNumberBigNumber","numberComplexBigNumberSparseMatrix","size","storage","numberComplexBigNumberDenseMatrix","ArrayNumberBigNumber","valueOf","numberComplexBigNumberArray","number","numberNumber","Error","createRoundNumber","_ref2"],"sources":["C:/Users/lauta/node_modules/mathjs/lib/esm/function/arithmetic/round.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { isInteger } from '../../utils/number.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nimport { roundNumber } from '../../plain/number/index.js';\nvar NO_INT = 'Number of decimals in function round must be an integer';\nvar name = 'round';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport var createRound = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    BigNumber,\n    DenseMatrix\n  } = _ref;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.22)             // returns number 3\n   *    math.round(3.82)             // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(3.22, 1)          // returns number 3.2\n   *    math.round(3.88, 1)          // returns number 3.9\n   *    math.round(-4.21, 1)         // returns number -4.2\n   *    math.round(-4.71, 1)         // returns number -4.7\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed(name, _objectSpread(_objectSpread({}, roundNumberSignatures), {}, {\n    Complex: function Complex(x) {\n      return x.round();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      var _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function numberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    Fraction: function Fraction(x) {\n      return x.round();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, this, true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function numberComplexBigNumberSparseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, this, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function numberComplexBigNumberDenseMatrix(x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, this, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function numberComplexBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    }\n  }));\n});\nvar roundNumberSignatures = {\n  number: roundNumber,\n  'number, number': function numberNumber(x, n) {\n    if (!isInteger(n)) {\n      throw new TypeError(NO_INT);\n    }\n\n    if (n < 0 || n > 15) {\n      throw new Error('Number of decimals in function round must be in the range of 0-15');\n    }\n\n    return roundNumber(x, n);\n  }\n};\nexport var createRoundNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, roundNumberSignatures);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}