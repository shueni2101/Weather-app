{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lauta\\\\Desktop\\\\clima\\\\my-wheater\\\\src\\\\componentes\\\\DateXCountry\\\\DateCountry.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DateCountry = _ref => {\n  _s();\n\n  let {\n    city\n  } = _ref;\n  const [dates, setDates] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n  useEffect(() => {\n    console.log(city);\n    setInterval(() => {\n      let showdate = new Date();\n      var localTime = showdate.getTime();\n      var offset = showdate.getTimezoneOffset() * 60000;\n      var utc = localTime + offset;\n      showdate = new Date(utc + 1000 * city.timezone);\n      setHours(showdate.toTimeString());\n      setDates(showdate.toDateString());\n    }, 1000);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [hours, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 14\n    }, this), dates]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DateCountry, \"waYyYfDLqTpSwLGowj5BM5u5URU=\");\n\n_c = DateCountry;\nexport default DateCountry;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateCountry\");","map":{"version":3,"names":["React","useState","useEffect","DateCountry","city","dates","setDates","hours","setHours","console","log","setInterval","showdate","Date","localTime","getTime","offset","getTimezoneOffset","utc","timezone","toTimeString","toDateString"],"sources":["C:/Users/lauta/Desktop/clima/my-wheater/src/componentes/DateXCountry/DateCountry.jsx"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nconst DateCountry= ({city})=> {\r\n\r\nconst[dates,setDates]=useState(\"\");\r\nconst[hours,setHours]=useState(\"\");\r\nuseEffect(()=>{\r\n  console.log(city)\r\nsetInterval(() =>{\r\n  \r\n    let showdate= new Date();\r\n    var localTime= showdate.getTime();\r\n    var offset= showdate.getTimezoneOffset() * 60000;\r\n    var utc= localTime + offset;\r\n    showdate= new Date(utc + 1000 * city.timezone)\r\n    setHours(showdate.toTimeString())\r\n    setDates(showdate.toDateString())\r\n},1000)\r\n\r\n},[])\r\nreturn (\r\n    <div>\r\n      {hours}<br/>\r\n      {dates}\r\n    </div>\r\n    );\r\n}\r\n  export default DateCountry;\r\n  "],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;;;AACA,MAAMC,WAAW,GAAE,QAAW;EAAA;;EAAA,IAAV;IAACC;EAAD,CAAU;EAE9B,MAAK,CAACC,KAAD,EAAOC,QAAP,IAAiBL,QAAQ,CAAC,EAAD,CAA9B;EACA,MAAK,CAACM,KAAD,EAAOC,QAAP,IAAiBP,QAAQ,CAAC,EAAD,CAA9B;EACAC,SAAS,CAAC,MAAI;IACZO,OAAO,CAACC,GAAR,CAAYN,IAAZ;IACFO,WAAW,CAAC,MAAK;MAEb,IAAIC,QAAQ,GAAE,IAAIC,IAAJ,EAAd;MACA,IAAIC,SAAS,GAAEF,QAAQ,CAACG,OAAT,EAAf;MACA,IAAIC,MAAM,GAAEJ,QAAQ,CAACK,iBAAT,KAA+B,KAA3C;MACA,IAAIC,GAAG,GAAEJ,SAAS,GAAGE,MAArB;MACAJ,QAAQ,GAAE,IAAIC,IAAJ,CAASK,GAAG,GAAG,OAAOd,IAAI,CAACe,QAA3B,CAAV;MACAX,QAAQ,CAACI,QAAQ,CAACQ,YAAT,EAAD,CAAR;MACAd,QAAQ,CAACM,QAAQ,CAACS,YAAT,EAAD,CAAR;IACH,CATU,EAST,IATS,CAAX;EAWC,CAbQ,EAaP,EAbO,CAAT;EAcA,oBACI;IAAA,WACGd,KADH,eACS;MAAA;MAAA;MAAA;IAAA,QADT,EAEGF,KAFH;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMC,CAxBD;;GAAMF,W;;KAAAA,W;AAyBJ,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}